<project name="Genetic Algorithm Framework" default="dist" basedir=".">
	<description>
        Un Framework per Algoritmi Genetici su Google AppEngine 
        parallelizzato con il modello MapReduce
    </description>
	<!-- set global properties for this build -->
	<!-- Le proprietà sono come delle costanti possono essere richiamate nei target tramite ${nomeproprietà} 
		 in questo caso e in generale le usiamo per salvare i nomi dei percorsi utilizzati di frequente-->
	<property name="src" location="src" />
	<property name="build" location="build" />
	<property name="lib" location="war/WEB-INF/lib" />
	<property name="dist" location="dist" />

	<property name="sdk" location="sdk" />
	<property name="version" value="1.6.1" />
	<property name="sdkdirname" value="appengine-java-sdk-${version}" />
	<property name="sdkfilename" value="${sdkdirname}.zip" />
	<property name="sdklibdir" location="${sdk}/${sdkdirname}/lib" />


	<!-- Questi task dovrebbero essere fatti SOLO SE l'sdk di appengine non è stata già scaricata ed estratta ma siccome abbiamo bisogno di importare
		delle risorse dalla sdk e il task import non può essere usato all'interno dei target ma solo al livello superiore dobbiamo necessariamente eseguire
		il download e l'estrazione della sdk PRIMA di eseguire l'import. Questa operazione deve essere migliorata in qualche modo. -->
	<!-- nota in <get> skipexisting funziona solo da ant 1.8 in poi-->
	<mkdir dir="${sdk}"  />
	<get src="http://googleappengine.googlecode.com/files/${sdkfilename}" dest="${sdk}/${sdkfilename}" skipexisting="true" />
	<unzip src="${sdk}/${sdkfilename}" dest="${sdk}" />

	<!-- questo import serve a caricare le macro definite da appengine per effettuare l'enanchement 
	delle classi che usano JDO e le annotazioni -->
	<import file="${sdk}/${sdkdirname}/config/user/ant-macros.xml" />



	<!-- il path sta ad indicare la locazion e i file presenti nella locazione da includere. 
		L'inclusione può avvenire in svariati target -->
	<!-- Per indicare la locazione si usa il tag fileset. -->
	<!-- Per includere file si utilizza include e si possono utilizzare anche wildcards per specificare i file-->
	<path id="servletjars">
		<fileset dir="${sdklibdir}/shared">
			<include name="geronimo-servlet_2.5_spec-1.2.jar" />
			<include name="servlet-api.jar" />
		</fileset>
	</path>


	<path id="projectjars">
		<fileset dir="${lib}">
			<include name="*.jar" />
		</fileset>
	</path>


	<!-- I target contengono le unità di lavoro di ant (i task), ogni target può dipendere da altri target. Quando viene invocato un target
		che ha delle dipendenze vengono eseguite PRIMA le dipendeze e poi il target.  -->
	<!-- All'interno dei target vengono messi i task, ogni task ha un nome diverso e costituisce un unità di lavoro. Esempi di task sono compile,
		mkdir, copy, ecc... Ogni task ha i suoi elementi innestati specifici-->
	<target name="init">
		<mkdir dir="${build}" />
	</target>

	<target name="compile" depends="init,download_sdk">
		<javac srcdir="${src}" destdir="${build}" debug="on" debuglevel="lines,source">
			<classpath>
				<path refid="servletjars" />
				<!-- refid serve per riferirsi ad un tag path definito precedentemente -->
				<path refid="projectjars" />
			</classpath>
		</javac>
	</target>



	<!-- Questo target è stato definito da appengine per effettuare l'enanchement delle classi JDO che usano annotazioni del datanucleus. 
  		riferimento: http://code.google.com/intl/it-IT/appengine/docs/java/tools/ant.html-->
	<target name="datanucleusenhance" depends="compile" description="Performs JDO enhancement on compiled data classes.">

		<enhance failonerror="true">
			<classpath>
				<pathelement path="${sdk}/${sdkdirname}/lib/appengine-tools-api.jar" />
				<pathelement path="${build}" />
				<fileset dir="${lib}" includes="*.jar" />
			</classpath>
			<fileset dir="${build}" includes="**/*.class" />
		</enhance>
	</target>


	<target name="dist" depends="datanucleusenhance" description="generate the distribution">
		<!-- Create the distribution directory -->
		<mkdir dir="${dist}/lib" />

		<!-- Put everything in ${build} into GAF.jar file -->
		<jar jarfile="${dist}/lib/GAF.jar" basedir="${build}" />
		<copy todir="${dist}/lib">
			<fileset dir="${lib}">
				<include name="commons*.jar" />
				<include name="DatastoreUtil.jar" />
				<include name="appengine-mapper.jar" />
				<include name="charts4j-1.2.jar" />
				<include name="guava-r07.jar" />
				<include name="hadoop-0.20.2-core.jar" />
				<include name="json.jar" />

			</fileset>
		</copy>
	</target>

	<target name="clean">
		<delete dir="${build}" />
		<delete dir="${dist}" />
	</target>

	<!-- al momento questi target sono ridondanti, li ho lasciati perchè bisogna trovare un modo per eliminare il get al livello superiore -->
	<target name="check_sdk_extracted" >
		<available file="${sdk}/${sdkdirname}" property="sdkextracted" />
	</target>

	<target name="download_sdk" description="Gets the AppEngine SDK" depends="check_sdk_extracted" unless="sdkextracted">
		<mkdir dir="${sdk}" />
		<get src="http://googleappengine.googlecode.com/files/${sdkfilename}" dest="${sdk}/${sdkfilename}" />
		<unzip src="${sdk}/${sdkfilename}" dest="${sdk}" />
	</target>

	<!-- Separate target because downloading the SDK can be expensive and
       usually only needs to be done once. -->
	<target name="clean_sdk">
		<delete dir="${sdk}" />
	</target>


</project>
